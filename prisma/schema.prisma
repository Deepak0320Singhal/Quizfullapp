generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//User Table (Logged-in Users)
model user {
  id            String         @id @default(uuid())               // Unique ID for each user
  name          String         @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  studentClass  String         @db.VarChar(100)
  password      String         @db.VarChar(100)
  dream         String         @db.VarChar(100)
  school        String         @db.VarChar(100)
  number        String         @db.VarChar(15)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  quizzes       quiz[]                                          // Relation to quizzes
  sessions      session[]                                       // Relation to user's quiz sessions
  userQuestions userQuestion[]                                  // Relation to user's quiz answers
}

//Question Table (Shared for Both Users)
model question {
  id             Int                @id @default(autoincrement()) // Unique question ID
  qno            Int
  question       String
  optiona        String
  optionb        String
  optionc        String
  optiond        String
  answer         String
  explaination   String
  toughness      String
  topic          String
  class          String
  subject        String
  userQuestions  userQuestion[]                                 // Relation to logged-in user answers
  guestQuestions guestUserQuestion[]                            // Relation to guest user answers
}

//Quiz Table (For Logged-in Users)
model quiz {
  id         String    @id @default(uuid())
  title      String?
  questions  Json                                         // Store questions in JSON format
  userId     String?                                      // Nullable for public quizzes
  isPublic   Boolean   @default(false)                    // For guest-accessible quizzes
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       user?     @relation(fields: [userId], references: [id])
}

//Session Table (For Logged-in Users)
model session {
  id        String              @id @default(uuid())              // Unique session ID
  submitted Boolean             @default(false)                   // Flag to check if the quiz was submitted
  userId    String                                                  // Foreign key to user
  user      user                @relation(fields: [userId], references: [id])
  createdAt DateTime            @default(now())
  questions userQuestion[]                                        // Relation to user answers
}

//User Question Table (For Logged-in Users)
model userQuestion {
  id         Int       @id @default(autoincrement())
  sessionId  String                                             // Foreign key to the session model
  questionId Int                                                // Foreign key to the question model
  userId     String                                             // Foreign key to the user model
  userAnswer String?                                            // Nullable for unanswered questions
  isCorrect  Boolean?                                           // Nullable until the answer is evaluated

  question   question   @relation(fields: [questionId], references: [id])
  session    session    @relation(fields: [sessionId], references: [id])
  user       user       @relation(fields: [userId], references: [id])
}

//Curriculum Model (For Structuring Quizzes)
model curriculum {
  id          Int    @id @default(autoincrement())
  className   String
  subjectName String
  topicName   String

  @@unique([className, subjectName, topicName])                 // Prevent duplicate topics
}

// Guest User Models (Separate Tables for Not Logged-in Users)

//Guest Session Table
model guestSession {
  id          String    @id @default(uuid())
  submitted   Boolean   @default(false)
  timeTaken   Int?       // ⏱️ Add this field for guest sessions too
  createdAt   DateTime   @default(now())
  guestQuestions guestUserQuestion[]
}

//Guest User Question Table
model guestUserQuestion {
  id          Int          @id @default(autoincrement())
  sessionId   String                                            // Foreign key to guestSession
  questionId  Int                                               // Foreign key to the question model
  userAnswer  String?                                           // Nullable initially for unanswered questions
  isCorrect   Boolean?                                          // Nullable until the answer is evaluated

  session     guestSession @relation(fields: [sessionId], references: [id])
  question    question     @relation(fields: [questionId], references: [id])
}