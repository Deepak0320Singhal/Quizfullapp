generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id            String         @id @default(uuid()) // Unique ID for each user
  name          String         @db.VarChar(100)
  email         String         @unique @db.VarChar(100)
  studentClass  String         @db.VarChar(100)
  password      String         @db.VarChar(100)
  dream         String         @db.VarChar(100)
  school        String         @db.VarChar(100)
  number        String         @db.VarChar(15)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  quizzes       quiz[]
  sessions      session[]      // Relation to user's quiz sessions
  userQuestions userQuestion[] // Relation to user's quiz questions
}

model question {
  id           Int            @id @default(autoincrement())
  qno          Int
  question     String
  optiona      String
  optionb      String
  optionc      String
  optiond      String
  answer       String
  explaination  String
  toughness    String
  topic        String
  class        String
  subject      String
  userQuestions userQuestion[] // Relation to track user attempts
}

model session {
  id        String              @id @default( uuid() )// Unique session ID
  submitted Boolean             @default(false) // Flag for session completion
  userId    String         // Foreign key to the User model
  user      user           @relation(fields: [userId], references: [id])
  createdAt DateTime       @default(now()) // Timestamp for session creation
  questions userQuestion[] // Relation to UserQuestion
}

model userQuestion {
  id         Int       @id @default(autoincrement())
  sessionId  String       // Foreign key to the Session model
  questionId Int       // Foreign key to the Question model
  userId     String    // Foreign key to the User model
  userAnswer String?   // The user's selected answer (nullable initially)
  isCorrect  Boolean?  // Nullable until the question is answered

  question question    @relation(fields: [questionId], references: [id])
  session  session     @relation(fields: [sessionId], references: [id])
  user     user        @relation(fields: [userId], references: [id])
}

model quiz {
  id         String    @id @default(uuid())
  title      String?
  questions  Json      // Store questions in JSON format
  userId     String?   // Nullable for public quizzes
  isPublic   Boolean   @default(false) // For guest-accessible quizzes
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       user?     @relation(fields: [userId], references: [id])
}

model curriculum {
  id          Int    @id @default(autoincrement())
  className   String
  subjectName String
  topicName   String

  @@unique([className, subjectName, topicName]) // Ensure no duplicates
} 